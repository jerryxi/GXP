<%@ CodeTemplate Language="C#" TargetLanguage="C#" ResponseEncoding="UTF-8" Src="..\CommonSqlCode.cs" Inherits="MoM.Templates.CommonSqlCode" Debug="False" Description="Template description here." %>
<%@ Property Name="DevelopersName" Type="String" Category="Context" Description="The name to include in the comment header" %>
<%@ Property Name="NameSpace" Type="String" Category="Context"  Description="The namespace to use for this class" %>
<%@ Property Name="SourceDatabase" Type="SchemaExplorer.DatabaseSchema" Category="Context" Optional="false" Description="Database that the documentation should be based on." %>
<%@ Property Name="SourceTable" Type="SchemaExplorer.TableSchema" Category="Context" Description="Table that the object is based on." %>
<%@ Property Name="DetailTable" Type="SchemaExplorer.TableSchema" Category="Context" Optional="True" Description="Table that the object is based on." %>
<%@ Property Name="StoreProcedure" Type="SchemaExplorer.CommandSchema " Category="Context" Optional="True" Description="Table that the object is based on." %>
<%@ Property Name="View" Type="SchemaExplorer.ViewSchema " Category="Context" Optional="True" Description="Table that the object is based on." %>

<%@ Assembly Name="System.Data" %>
<%@ Assembly Name="SchemaExplorer" %>

<%@ Import Namespace="System.Data" %>
<%@ Import Namespace="SchemaExplorer" %>

@{
    Layout = null;
}
<!DOCTYPE html>
<html>
<head>
    <title>Index</title>
    <link href="../../Content/jquery-easyui/themes/icon.css" rel="stylesheet" />
    <link href="../../Content/jquery-easyui/themes/default/easyui.css" rel="stylesheet" />
    <link href="../../Content/Site.css" rel="stylesheet" />
    <script src="../../Content/utility.js"></script>
    <script src="../../Content/jquery-easyui/jquery.min.js"></script>
    <script src="../../Content/jquery-easyui/jquery.easyui.min.js"></script>
    <script src="../../Content/jquery-easyui/locale/easyui-lang-zh_CN.js"></script>
    <script src="../../Content/jquery-easyui/datapattern2.js"></script>
    
    <script type="text/javascript">
        var gridheight = document.documentElement.clientHeight - 100;
        $(function () {
            
            //初始化弹出窗体
            initTable();
            
            //注册查询按钮事件
            Search<%=FormatClassName(SourceTable) %>Info();

            //注册新增弹出框的保存按钮事件
            BindRegistButtonClickEvent();

            //注册新增弹出框的保存并继续按钮事件
            BindRegistAndContinueButtonClickEvent();

            //注册更新弹出框的保存按钮事件
            BindUpdateButtonClickEvent();

            //新增保存的时候只能添加一个用户名，进行异步判断
            Check<%=FormatClassName(SourceTable) %>InfoIsTrue();

        });

        //初始化表格 
        function initTable(queryData) {
            $('#<%=FormatClassName(SourceTable) %>').datagrid({
                //title: '<%=FormatClassName(SourceTable) %>',
                //iconCls: 'icon-save',
                height: gridheight,
                nowrap: true,
                autoRowHeight: false,
                striped: true,
                collapsible: true,
                url: '/UserInfo/GetAll<%=FormatClassName(SourceTable) %>',
                sortName: '<%=GetOriginalPrimaryKey(SourceTable) %>',
                sortOrder: 'asc',
                border: true,
                remoteSort: true,
                idField: '<%=GetOriginalPrimaryKey(SourceTable) %>',
                loadMsg: '请稍等...',
                pageSize: @GXP.Common.ConstUtils.CONST_PAGE_SIZE,
                pagination: true,
                rownumbers: true,
                fitColumns: false,
                queryParams: queryData,
                columns: [[
                    { field: 'ck', checkbox: true },
					<%=GetGridColumns(SourceTable) %>
                ]],                

                toolbar: [{
                    id: 'btnAdd',
                    text: '添加',
                    iconCls: 'icon-add',
                    handler: function () {
                        //实现弹出添加用户信息的层
                        ShowCreate<%=FormatClassName(SourceTable) %>Dialog();
                    }
                }, '-', {
                    id: 'btnEdit',
                    text: '修改',
                    iconCls: 'icon-edit',
                    handler: function () {
                        //实现弹出修改用户信息的层
                        ShowEdit<%=FormatClassName(SourceTable) %>Dialog();
                    }
                }, '-', {
                    id: 'btnDelete',
                    text: '删除',
                    iconCls: 'icon-remove',
                    handler: function () {
                        //确认只删除一条用户信息
                        Delete<%=FormatClassName(SourceTable) %>InfoByClick();
                    }
                }
                ]
            });
        }

        //弹出添加用户的对话框
        function ShowCreate<%=FormatClassName(SourceTable) %>Dialog() {
            //实现弹出添加用户信息的层
            $('#Edit<%=FormatClassName(SourceTable) %>Dialog').dialog('open').dialog('setTitle', '新增用户信息');
            //$("#UserCode").css("background-color", "");
            //$("#UserCode").removeAttr("readonly");
            //添加完成后清空文本框的值
            ClearTextBox();
        }

        //弹出修改用户的对话框
        function ShowEdit<%=FormatClassName(SourceTable) %>Dialog() {
            var Update<%=FormatClassName(SourceTable) %>InfoID = $("#<%=FormatClassName(SourceTable) %>").datagrid("getSelections");
            if (Update<%=FormatClassName(SourceTable) %>InfoID.length == 1) {
                $("#Edit<%=FormatClassName(SourceTable) %>Dialog").dialog("open").dialog("setTitle", "修改用户信息");
                //绑定显示修改的详细信息的内容
                BingUpdateDetailsShowTextBox();
            }
            else {
                $.messager.alert("提示", "每次只能修改一行数据，你已经选择了<font color='red' size='3'>" + Update<%=FormatClassName(SourceTable) %>InfoID.length + "</font>行");
            }
        }

        //实现多选删除信息
        function Delete<%=FormatClassName(SourceTable) %>InfoByClick() {
            //获取到用户选定的某一列的ID号
            var deleteID = $("#<%=FormatClassName(SourceTable) %>").datagrid("getSelections");
            //判断用户选择了多少条数据
            //异步将删除的ID发送到后台，后台删除之后，返回前台OK，前台刷新表格
            if (deleteID.length >= 1) {
                var ids = "";   //1,2,3,4
                for (var i = 0; i < deleteID.length; i++) {
                    ids += deleteID[i].<%=GetOriginalPrimaryKey(SourceTable) %> + ",";
                }
                //去掉最后的一个,
                ids = ids.substring(0, ids.length - 1);

                //遍历出被删除用户的信息
                var tmpList = "";
                for (var i = 0; i < deleteID.length; i++) {
                    tmpList += deleteID[i].<%=GetOriginalPrimaryKey(SourceTable) %> + ",";
                }
                tmpList = tmpList.substring(0, tmpList.length - 1);
                //发送异步请求删除数据
                $.messager.confirm("删除信息", "确认删除<font color='Red' size='3'>" + tmpList + "</font>吗？", function (Delete<%=FormatClassName(SourceTable) %>Info) {
                    if (Delete<%=FormatClassName(SourceTable) %>Info) {
                        $.post("/UserInfo/Delete", { deleteID: ids }, function (data) {
                            if (data == "OK") {
                                $.messager.alert("提示", "删除成功");
                                $("#<%=FormatClassName(SourceTable) %>").datagrid("reload");
                                $("#<%=FormatClassName(SourceTable) %>").datagrid("clearSelections");
                            }
                            else {
                                $.messager.alert("提示", "删除失败:" + data);
                            }
                        });
                    }
                });
            }
            else {
                $.messager.alert("提示", "请选择您要删除的数据");
            }
        }
        
        //注册新增弹出框的保存按钮事件
        function BindRegistButtonClickEvent() {
            $("#btnSave").click(function () {
                //验证所有的文本框是否通过用户的验证
                var valid = $('#Edit<%=FormatClassName(SourceTable) %>Info').form('validate');
                if (valid == false) {
                    return false;
                }
                var postdata = {                    
                    <%=GetValueFromPageInput(SourceTable)%>
                };
                //发送异步请求到后台保存用户数据
                $.post("/UserInfo/Edit", postdata, function (data) {
                    if (data == "OK") {
                        //添加成功，(1)关闭对话框，刷新表格
                        alert("添加成功");
                        $('#Edit<%=FormatClassName(SourceTable) %>Dialog').dialog('close');
                        $("#<%=FormatClassName(SourceTable) %>").datagrid("reload");
                    }
                    else {
                        alert("添加失败，请检查"+data);
                    }
                });
            });
        }

        //注册新增弹出框的保存按钮事件
        function BindRegistAndContinueButtonClickEvent() {
            $("#btnSaveAndCon").click(function () {
                //验证所有的文本框是否通过用户的验证d
                var valid = $('#Edit<%=FormatClassName(SourceTable) %>Info').form('validate');
                if (valid == false) {
                    return false;
                }
                var postdata = {
                    <%=GetValueFromPageInput(SourceTable)%>
                };
                //发送异步请求到后台保存用户数据
                $.post("/UserInfo/Edit", postdata, function (data) {
                    if (data == "OK") {
                        //添加成功，(1)关闭对话框，刷新表格
                        //alert("添加成功");
                        //$('#EditUserDialog').dialog('close');
                        //$("#Users").datagrid("reload");
                        ClearTextBox();
                        //$("#UserID").focus();
                    }
                    else {
                        alert("添加失败，请检查!"+data);
                    }
                });
            });
        }

        //修改用户的信息
        function BindUpdateButtonClickEvent() {
            $("#btnUpdate").click(function () {
                //首先判断前台的验证是否通过
                var valid = $('#Edit<%=FormatClassName(SourceTable) %>Info').form('validate');
                if (valid == false) {
                    return false;
                }
                var postData = {
                    <%=GetValueFromPageInput(SourceTable)%>
                };

                //使用异步实现修改用户信息
                $.post("/UserInfo/Update", postData, function (data) {
                    if (data == "OK") {
                        $("#Edit'<%=FormatClassName(SourceTable) %>'Dialog").dialog('close');
                        $("#<%=FormatClassName(SourceTable) %>").datagrid('reload');
                    }
                    else {
                        alert("修改失败，请检查!"+data);
                    }
                });
            });
        }

        //绑定修改用户的信息显示在用户的TextBox文本框中
        function BingUpdateDetailsShowTextBox() {
            //首先获取选中的用户的ID
            var checkID = $("#<%=FormatClassName(SourceTable) %>").datagrid("getSelections")[0].<%=GetOriginalPrimaryKey(SourceTable) %>;
            //使用异步的getJSON请求绑定前台传递过来的数据
            $.getJSON("/UserInfo/Get<%=FormatClassName(SourceTable) %>InfoByID", { ID: checkID }, function (data) {                
                <%=SetValueToPageInput(SourceTable) %>
            });
        }

        //当添加或者修改完成后清空文本框中的值
        function ClearTextBox() {                
                <%=ClearTextBox(SourceTable) %>
        }

        //检查用户名是否存在
        function Check<%=FormatClassName(SourceTable) %>InfoIsTrue() {
            $("#UserCode").blur(function () {
                if (typeof ($("#UserCode").attr("readonly")) == "undefined") {
                    //获取输入到控件的值
                    var UserCode = $("#UserCode").val();
                    //使用异步验证
                    $.post("/UserInfo/CheckUnique", { code: UserCode }, function (data) {
                        if (data == "NO") {
                            alert("用户名已经存在，请您检查");
                            $("#UserCode").val("");
                            return;
                        }
                    });
                }
            });
        }

        //搜索数据信息
        function Search<%=FormatClassName(SourceTable) %>Info() {
            $("#btnSerach").click(function () {
                var queryData = { 
                <%=GetQueryParams(SourceTable)%>
                };
                initTable(queryData);
                return false;  
            });
        }
    </script>
</head>
<body>
    <fieldset>
        <legend>查询</legend>
    <div>
        <%=InitQueryControl(SourceTable) %>
        <a href="#" class="easyui-linkbutton" data-options="iconCls:'icon-search'" id="btnSerach" name="btnSerach">查询</a>
    </div>
    </fieldset>
    <div>
        <table id="<%=FormatClassName(SourceTable) %>"></table>
    </div>
    <div id="Edit<%=FormatClassName(SourceTable) %>Dialog" class="easyui-dialog" style="width:500px;height:500px;padding:10px 20px"
			closed="true" resizable="true" modal="true" buttons="#dlg-buttons" align="center">
        <form id="Edit<%=FormatClassName(SourceTable) %>Info" method="post" novalidate="novalidate">
            <table id="tableEdit">
                <tr>
                    <th colspan="2" >信息</th>
                </tr>                
                <%=InitEditControl(SourceTable) %>
                <tr>
                    <td colspan="2" style="text-align:center; padding-top:10px">
                        <a href="javascript:void(0)" class="easyui-linkbutton" id="btnSave" iconcls="icon-ok" >保存</a>
                        <a href="javascript:void(0)" class="easyui-linkbutton" iconcls="icon-cancel" onclick="javascript:$('#Edit<%=FormatClassName(SourceTable) %>Dialog').dialog('close')">关闭</a>
                    </td>
                </tr>
            </table>
        </form>
    </div>
</body>
</html>


<script runat="template">


    public string GetGridColumns(TableSchema st)
	{
        string str = "";
        for (int i = 0; i < st.Columns.Count; i++)
        {
            if(i != st.Columns.Count-1)
            {
                str += "{ field: '"+GetPropertyName(st.Columns[i])+"', title: '"+GetPropertyName(st.Columns[i])+"', width: 100, sortable: true }, "+"\n\t\t\t\t\t";
            }
            else
            {
                str += "{ field: '"+GetPropertyName(st.Columns[i])+"', title: '"+GetPropertyName(st.Columns[i])+"', width: 100, sortable: true } "+"\n\t\t\t\t\t";
            }                
        }
        
        return str;        
    }
    
    public string GetValueFromPageInput(TableSchema st)
	{
        string str = "";
        for (int i = 0; i < st.Columns.Count; i++)
        {
            if(i != st.Columns.Count-1)
            {
                str += string.Format("{0}: $(\"#{0}\").val(),\n\t\t\t\t",GetPropertyName(st.Columns[i]));
            }
            else
            {
                str += string.Format("{0}: $(\"#{0}\").val()",GetPropertyName(st.Columns[i]));
            }                
        }
        
        return str;        
    }

    public string SetValueToPageInput(TableSchema st)
	{
        string str = "";
        for (int i = 0; i < st.Columns.Count; i++)
        {
            if(i != st.Columns.Count-1)
            {
                str += string.Format("$(\"#{0}\").val(data.{0});\n\t\t\t\t\t",GetPropertyName(st.Columns[i]));
            }
            else
            {
                str += string.Format("$(\"#{0}\").val(data.{0});",GetPropertyName(st.Columns[i]));
            }                
        }
        
        return str;        
    }
    
    
    public string ClearTextBox(TableSchema st)
	{
        string str = "";
        for (int i = 0; i < st.Columns.Count; i++)
        {
            if(i != st.Columns.Count-1)
            {
                str += string.Format("$(\"#{0}\").val(\"\");\n\t\t\t\t\t",GetPropertyName(st.Columns[i]));
            }
            else
            {
                str += string.Format("$(\"#{0}\").val(\"\");",GetPropertyName(st.Columns[i]));
            }                
        }
        
        return str;        
    }
    
    public string GetQueryParams(TableSchema st)
	{
        string str = "";
        for (int i = 0; i < st.Columns.Count; i++)
        {
            if(i != st.Columns.Count-1)
            {
                str += string.Format("Q_{0}: $(\"#Q_{0}\").val(), \n\t\t\t\t\t",GetPropertyName(st.Columns[i]));
            }
            else
            {
                str += string.Format("Q_{0}: $(\"#Q_{0}\").val()",GetPropertyName(st.Columns[i]));
            }                
        }
        
        return str;  
        
    }
    
    public string InitQueryControl(TableSchema st)
	{
        string str = "";
        for (int i = 0; i < st.Columns.Count; i++)
        {
            if(i != st.Columns.Count-1)
            {
                str += string.Format("<label for=\"Q_{0}\">{0}：</label> \n",GetPropertyName(st.Columns[i]));
                str += string.Format("<input type=\"text\" ID=\"Q_{0}\" name=\"Q_{0}\"  />&nbsp;&nbsp; \n",GetPropertyName(st.Columns[i]));                
            }
            else
            {
                str += string.Format("<label for=\"Q_{0}\">{0}：</label> \n",GetPropertyName(st.Columns[i]));
                str += string.Format("<input type=\"text\" ID=\"Q_{0}\" name=\"Q_{0}\"  />\n",GetPropertyName(st.Columns[i]));         
            }
        }
        
        return str;       
    }
    
    public string InitEditControl(TableSchema st)
	{
        string str = "";
        for (int i = 0; i < st.Columns.Count; i++)
        {
            str += string.Format("<tr>\n","");
            str += string.Format("<td><label for=\"{0}\">{0}：</label></td>\n",GetPropertyName(st.Columns[i]));
            str += string.Format("<td><input class=\"easyui-textbox\" type=\"text\" id=\"{0}\" name=\"{0}\" /></td>\n",GetPropertyName(st.Columns[i]));                
            str += string.Format("</tr>\n","");
        }
        
        return str;       
    }
    
    
    

	public string GetUpdateSQLString(SchemaObjectBase schemaObject)
	{
		string pramaryKey = GetEntityClassName(SourceTable)+"_GID";
		string sql = "\"UPDATE "+GetEntityClassName(SourceTable) + " SET ";
		for(int i=0;i<SourceTable.Columns.Count;i++)
		{
			if ( GetPropertyName(SourceTable.Columns[i]) == "TS")
			{
				continue;
			}
			if ( GetPropertyName(SourceTable.Columns[i]) == "ROWID")
			{
				continue;
			}
			else if ( GetPropertyName(SourceTable.Columns[i]) == "CREATED_BY")
			{
				continue;
			}
			else if ( GetPropertyName(SourceTable.Columns[i]) == "CREATED_DATE")
			{
				continue;
			}
			else if ( SourceTable.Columns[i].IsPrimaryKeyMember == true)
			{
				continue;
			}
			else if ( GetPropertyName(SourceTable.Columns[i]) == "UPDATED_DATE")
			{
				string temp = GetPropertyName(SourceTable.Columns[i]);
				sql += temp + " = GETDATE(), ";
				continue;
			}			
			else
			{
				string temp = GetPropertyName(SourceTable.Columns[i]);
				sql +=  temp+" = @"+temp+", ";
			}
		}
		sql = sql.Substring(0,sql.LastIndexOf(","));
		sql += " WHERE " + GenPrimaryKeyParamValue1(SourceTable) + " \";";
		return sql;
	}
	
	//得到新增的SQL语句
	public string GetInsertSQLString(SchemaObjectBase schemaObject)
	{
		string pramaryKey = GetEntityClassName(SourceTable)+"_GID";
		string sql = "\"INSERT INTO " + GetEntityClassName(SourceTable) + " ( ";
		
		for(int i=0;i<SourceTable.Columns.Count;i++)
		{			
			if(GetPropertyName(SourceTable.Columns[i]).ToUpper() != "ROWID" && GetPropertyName(SourceTable.Columns[i]).ToUpper() != "TS")
			{
				if(i == SourceTable.Columns.Count - 1)
				{
					sql += GetPropertyName(SourceTable.Columns[i]) + ") VALUES ( ";
				}
				else
				{
					sql += GetPropertyName(SourceTable.Columns[i]) + ", ";
				}
			}
			else if(i == SourceTable.Columns.Count - 1)
			{
				sql += GetPropertyName(SourceTable.Columns[i]) + ") VALUES ( ";
			}
		}
		
		for(int i=0;i<SourceTable.Columns.Count;i++)
		{
			if(GetPropertyName(SourceTable.Columns[i]).ToUpper() == "CREATED_DATE" || GetPropertyName(SourceTable.Columns[i]).ToUpper() == "UPDATED_DATE")
			{
				if(i == SourceTable.Columns.Count - 1)
				{
					sql += "GETDATE() ) ";
				}
				else
				{
					sql += "GETDATE(), ";
					}
			}
			else
			{
				if(GetPropertyName(SourceTable.Columns[i]).ToUpper() != "ROWID" 
                && GetPropertyName(SourceTable.Columns[i]).ToUpper() != "TS"
                && i != SourceTable.Columns.Count - 1)
				{
					sql += "@" + GetPropertyName(SourceTable.Columns[i]) + ", ";
				}
				else if(i == SourceTable.Columns.Count - 1)
				{
					sql += "@" + GetPropertyName(SourceTable.Columns[i]) + ") ";
				}
			}
		}
		
		return sql;
	}
	//得到查询的SQL语句
    public string GetSelectSQLString(SchemaObjectBase schemaObject)
    {
        string sql = "SELECT ";
        string tableName = GetEntityClassName(SourceTable);
        string shortTableName = GetTableShortName(SourceTable);
        for(int i=0;i<SourceTable.Columns.Count;i++)
		{
            sql += shortTableName+"."+GetPropertyName(SourceTable.Columns[i])+" AS "+GetPropertyName(SourceTable.Columns[i])+", ";
        }
        sql = sql.Substring(0,sql.Length-2) + " FROM " + tableName + " "+GetTableShortName(schemaObject) + " WHERE 1=1 ";        
        return sql;
    }
    
    //组织DataReader出来的数据
	public string GetSQLDataReaderString(SchemaObjectBase schemaObject)
	{
		int count = SourceTable.Columns.Count;
		string str = "reader[\"@\"].ToString()";
		string temp = "";
		
		for(int i=0;i<count;i++)
		{		
			if(SourceTable.Columns[i].DataType==System.Data.DbType.DateTime)
			{
				temp+=str.Replace("@",GetPropertyName(SourceTable.Columns[i]))+"!=\"\" ? "+"DateTime.Parse("+str.Replace("@",GetPropertyName(SourceTable.Columns[i]))+"):new DateTime(),";
			}
			else if (SourceTable.Columns[i].DataType==System.Data.DbType.Decimal)
			{
				temp+=str.Replace("@",GetPropertyName(SourceTable.Columns[i]))+"!=\"\" ? "+"Decimal.Parse("+str.Replace("@",GetPropertyName(SourceTable.Columns[i]))+"):0,";
			}
			else if (SourceTable.Columns[i].DataType==System.Data.DbType.Double)
			{
				temp+=str.Replace("@",GetPropertyName(SourceTable.Columns[i]))+"!=\"\" ? "+"float.Parse("+str.Replace("@",GetPropertyName(SourceTable.Columns[i]))+"):0,";
			}
			else if(SourceTable.Columns[i].DataType == System.Data.DbType.Int32)
			{
				temp+=str.Replace("@",GetPropertyName(SourceTable.Columns[i]))+"!=\"\" ? "+"Int32.Parse("+str.Replace("@",GetPropertyName(SourceTable.Columns[i]))+"):0,";
			}
			else if(SourceTable.Columns[i].DataType == System.Data.DbType.Binary)
			{
				string s = str.Substring(0, str.IndexOf("."));
				temp+=s.Replace("@",GetPropertyName(SourceTable.Columns[i]))+",";
			}
			else
				temp += str.Replace("@",GetPropertyName(SourceTable.Columns[i]))+",";		
            
            temp += "\n";
		}
		
		temp = temp.Substring(0, temp.LastIndexOf(","));
		
		return temp;
	}
	//格式化类名
	public string FormatClassName(SchemaObjectBase schemaObject)
	{
		string str="";
		str=GetClassName(schemaObject.Name);
		str=str.ToLower();
		string temp = "";
		char[] array = str.ToCharArray();
        for (int i = 0; i < array.Length; i++)
        {
            if (i == 0)
            {
                array[0] = Convert.ToChar(array[0].ToString().ToUpper());                    
            }
          
            if (array[i].ToString() == "_")
            {
                array[i + 1] = Convert.ToChar(array[i + 1].ToString().ToUpper());
            } 
            temp += array[i].ToString();
        }
		if(temp.Contains("_"))
        	temp = temp.Replace("_", "");
			
		return temp;
	}
    public string FormatClassNameLower(SchemaObjectBase schemaObject)
	{
		string str="";
		str=GetClassName(schemaObject.Name);
		str=str.ToLower();
		string temp = "";
		char[] array = str.ToCharArray();
        for (int i = 0; i < array.Length; i++)
        {
            if (i == 0)
            {
                array[0] = Convert.ToChar(array[0].ToString().ToUpper());                    
            }
          
            if (array[i].ToString() == "_")
            {
                array[i + 1] = Convert.ToChar(array[i + 1].ToString().ToUpper());
            } 
            temp += array[i].ToString();
        }
		if(temp.Contains("_"))
        	temp = temp.Replace("_", "");
			
		return temp.ToLower();
	}
    
    
	//???????????????????
	public string FormatParamClassName(SchemaObjectBase schemaObject)
	{
		string str="";
		str=GetClassName(schemaObject.Name);
		str=str.ToLower();
		string temp = "";
		char[] array = str.ToCharArray();
        for (int i = 0; i < array.Length; i++)
        {
            //if (i == 0)
            //{
            //    array[0] = Convert.ToChar(array[0].ToString().ToUpper());                    
            //}
          
            if (array[i].ToString() == "_")
            {
                array[i + 1] = Convert.ToChar(array[i + 1].ToString().ToUpper());
            } 
            temp += array[i].ToString();
        }
        temp = temp.Replace("_", "");
		return temp;
	}

	public string GenPrimaryKeySentence(TableSchema table)
		{
			if (table.PrimaryKey != null)
			{
				if (table.PrimaryKey.MemberColumns.Count == 1)
				{
					return GetCSType(table.PrimaryKey.MemberColumns[0]) + " " + GetCamelCaseName(GetSafeName(table.PrimaryKey.MemberColumns[0]));
				}
				else
				{
					throw new ApplicationException("This template will not work on primary keys with more than one member column.");
				}
			}
			else
			{
				throw new ApplicationException("This template will only work on tables with a primary key.");
			}
		}
	
    //得到表的缩写（首字母）
    public string GetTableShortName(SchemaObjectBase schemaObject)
    {
        string str = "";
        string tableName = GetEntityClassName(SourceTable);
        string[] lst = tableName.Split(new char[]{'_'});
        for(int i=0;i<lst.Length;i++)
        {
            str += lst[i].Substring(0,1);
            }
        return str;
    }
    
		public string GenPrimaryKeyParam(TableSchema table)
		{
			string s = "";
			if (table.PrimaryKey != null)
			{
				for(int i = 0; i < table.PrimaryKey.MemberColumns.Count; i++)
				{
					s = s + GetCSType(table.PrimaryKey.MemberColumns[i]) + " " + GetCamelCaseName(GetSafeName(table.PrimaryKey.MemberColumns[i])) + ", ";
				}
			}
			else
			{
				throw new ApplicationException("This template will only work on tables with a primary key.");
			}
			s = s.Remove(s.Length - 2, 2);
			return s;
		}
		public string GenPrimaryKeyParamValue(TableSchema table)
		{
			string s = "";
			if (table.PrimaryKey != null)
			{
				for(int i = 0; i < table.PrimaryKey.MemberColumns.Count; i++)
				{
					s = s + GetMemberVariableName(table.PrimaryKey.MemberColumns[i]) + " = " + GetCamelCaseName(GetSafeName(table.PrimaryKey.MemberColumns[i])) + ";\n\t\t\t";
				}
			}
			else
			{
				throw new ApplicationException("This template will only work on tables with a primary key.");
			}
			s = s.Remove(s.Length - 2, 2);
			return s;
		}
		public string GenPrimaryKeyParamValue1(TableSchema table)
		{
			string s = "";
			if (table.PrimaryKey != null)
			{
				for(int i = 0; i < table.PrimaryKey.MemberColumns.Count; i++)
				{
					s = s + GetCamelCaseName(GetSafeName(table.PrimaryKey.MemberColumns[i])) + " = " +"@"+GetCamelCaseName(GetSafeName(table.PrimaryKey.MemberColumns[i]))+" AND ";
				}
			}
			else
			{
				throw new ApplicationException("This template will only work on tables with a primary key.");
			}
			//s = s.Remove(s.Length - 1, 1);
			s = s.Substring(0,s.Length-4);
			return s.ToUpper();
		}
		public string GetPrimaryKeySentences(TableSchema table)
		{
			string s = "";
			if (table.PrimaryKey != null)
			{
				for(int i = 0; i < table.PrimaryKey.MemberColumns.Count; i++)
				{
					s = s + "private " + GetCSType(table.PrimaryKey.MemberColumns[i]) + " " + GetMemberVariableName(table.PrimaryKey.MemberColumns[i]) + ";" + Environment.NewLine + "\t\t";
				}
			}
			else
			{
				throw new ApplicationException("This template will only work on tables with a primary key.");
			}
			return s;
		}
		public string GetOriginalPrimaryKey(TableSchema table)
		{			
			return table.PrimaryKey.MemberColumns[0].Name;
		}
		public string GetPrimaryKey(TableSchema table)
		{
			string s="";
			if(table.PrimaryKey !=null)
			{
				for(int i=0;i<table.PrimaryKey .MemberColumns .Count ;i++)
				{
					s=s+GetMemberVariableName(table.PrimaryKey.MemberColumns[i])+";" + Environment.NewLine + "\t\t";
				}
			}
			else
			{
				throw new ApplicationException("This template will only work on tables with a primary key.");
			}		
			s=s.Substring (1,s.LastIndexOf(";")-1);
			return s;
		}
		
		public string GetMemberVariableDeclarationStatement(ColumnSchema column)
		{
			return GetMemberVariableDeclarationStatement("protected", column);
		}

		public string GetMemberVariableDeclarationStatement(string protectionLevel, ColumnSchema column)
		{
			string statement = protectionLevel + " ";
			statement += GetCSType(column) + " " + GetMemberVariableName(column);
	
			
			statement += ";";
	
			return statement;
		}
		
public string GetConstructorParameters( TableSchema table )
{
	string ret = "";
	foreach(ColumnSchema column in table.Columns)
	{
		ret += GetCSType(column) + " " + GetCamelCaseName(GetPropertyName(column)) + ",\n\t\t\t";
	}
	return ret.Substring(0, ret.Length - 5);
}

public string GetAssignValue( TableSchema table )
{
	string ret = "";
	foreach(ColumnSchema column in table.Columns)
	{
		ret += GetMemberVariableName(column) + (new String(' ', GetPropertyNameMaxLength(table) - GetPropertyNameLength(column))) + " = " + GetCamelCaseName(GetPropertyName(column)) + ";\n\t\t\t";
	}
	return ret;
}
public int GetPropertyNameLength(ColumnSchema column)
{
	return (GetPropertyName(column)).Length;
}
public int GetPropertyNameMaxLength(TableSchema table)
{
	int ret = 0;
	foreach(ColumnSchema column in table.Columns)
	{
		ret = ret < GetPropertyNameLength(column)?GetPropertyNameLength(column):ret;
	}
	return ret;
}

	public string GetSqlDataType(DbType dataType)
		{
			switch (dataType)
			{
				case DbType.AnsiString: return "SqlDbType.VarChar";
				//case DbType.AnsiStringFixedLength: return SqlDbType.;
				case DbType.Binary: return "SqlDbType.Binary";
				case DbType.Boolean: return "SqlDbType.Bit";
				case DbType.Byte: return "SqlDbType.Binary";
				//case DbType.Currency: return "NullableDecimal";
				case DbType.Date: return "SqlDbType.Date";
				case DbType.DateTime: return "SqlDbType.DateTime";
				case DbType.Decimal: return "SqlDbType.Decimal";
				case DbType.Double: return "SqlDbType.Float";
				case DbType.Guid: return "SqlDbType.UniqueIdentifier";
				case DbType.Int16: return "SqlDbType.SmallInt";
				case DbType.Int32: return "SqlDbType.Int";
				case DbType.Int64: return "SqlDbType.BigInt";
				//case DbType.Object: return SqlDbType.;
				case DbType.Single: return "SqlDbType.Real";
				case DbType.String: return "SqlDbType.NText";
				case DbType.StringFixedLength: return "SqlDbType.NChar";
				case DbType.Time: return "SqlDbType.Time";
				//case DbType.VarNumeric: return SqlDbType.v;
					//the following won't be used
					//		case DbType.SByte: return "NullableSByte";
					//		case DbType.UInt16: return "NullableUShort";
					//		case DbType.UInt32: return "NullableUInt";
					//		case DbType.UInt64: return "NullableULong";
				default: return "SqlDbType.VarChar";
			}
		}
		
	public string SetSqlparam(TableSchema table)
		{
			string s = "";
			   for (int i = 0; i < table.Columns.Count; i++)
				{
					if (table.Columns[i].DataType == System.Data.DbType.Binary)//TS过滤
					{
						continue;
					}
					if (table.Columns[i].Name.ToUpper() == "ROWID")//ROWID过滤
					{
						continue;
					}
					if (table.Columns[i].Name.ToUpper() == "CREATED_DATE")//CREATED_DATE
					{
						continue;
					}
					if (table.Columns[i].Name.ToUpper() == "UPDATED_DATE")//UPDATED_DATE过滤
					{
						continue;
					}
					
					s = s + "new SqlParameter(this."+GetPropertyName(SourceTable.Columns[i])+ ","+GetSqlDataType(SourceTable.Columns[i].DataType)+","+SourceTable.Columns[i].Size.ToString()+")"+",\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t";
				}				
			s = s.Remove(s.Length - 2, 2);
			s = s.Substring(0,s.LastIndexOf(","));
			return s;
		}
		
	public string SetSqlparamArray(TableSchema table)
    {
    	string s = "";
		int iParamSeq = -1;
		for(int i = 0;i<table.Columns.Count;i++)
		{			
			if (table.Columns[i].DataType == System.Data.DbType.Binary)//TS过滤
			{
				continue;
			}
			if (table.Columns[i].Name.ToUpper() == "ROWID")//ROWID过滤
			{
				continue;
			}
			if (table.Columns[i].Name.ToUpper() == "CREATED_DATE")//CREATED_DATE
			{
				continue;
			}
			if (table.Columns[i].Name.ToUpper() == "UPDATED_DATE")//UPDATED_DATE过滤
			{
				continue;
			}
			iParamSeq++;
			if(table.Columns[i].AllowDBNull)
			{
				if(table.Columns[i].DataType == System.Data.DbType.AnsiString)
				{
					s = s +"\n\t\t\t\t"+"if(!string.IsNullOrEmpty("+FormatParamClassName(SourceTable)+"Info."+GetFormatPropertyName(SourceTable.Columns[i])+"))"+"\n\t\t\t\t";
					s = s+"  paramArray["+iParamSeq+"].Value="+ FormatParamClassName(SourceTable)+"Info."+GetFormatPropertyName(SourceTable.Columns[i])+";"+"\n\t\t\t\t";
					s=s+"else"+"\n\t\t\t\t";
					s=s+"  paramArray["+iParamSeq+"].Value="+"DBNull.Value"+";"+"\n\t\t\t\t";
				}
				else if(table.Columns[i].DataType == System.Data.DbType.DateTime)
				{
					if(GetPropertyName(table.Columns[i]) == "UPDATED_DATE")
					{
						s = s + "\n\t\t\t\t";
						s = s +"  paramArray["+iParamSeq+"].Value=DateTime.Now;"+"\n\t\t\t\t";
					}
					else
					{					
						s = s +"\n\t\t\t\t"+"if("+FormatParamClassName(SourceTable)+"Info."+GetFormatPropertyName(SourceTable.Columns[i])+" != new DateTime()"+")"+"\n\t\t\t\t";
						s = s+"  paramArray["+iParamSeq+"].Value="+ FormatParamClassName(SourceTable)+"Info."+GetFormatPropertyName(SourceTable.Columns[i])+";"+"\n\t\t\t\t";
						s=s+"else"+"\n\t\t\t\t";
						s=s+"  paramArray["+iParamSeq+"].Value="+"DBNull.Value"+";"+"\n\t\t\t\t";
					}
					
				}
				
				//begin  给UpdatedDate赋服务器时间
				else if(GetPropertyName(table.Columns[i]) == "UPDATED_DATE")
				{
					s = s + "\n\t\t\t\t";
					s = s +"  paramArray["+iParamSeq+"].Value=DateTime.Now;"+"\n\t\t\t\t";
				}
				//end
				
				else if(table.Columns[i].DataType == System.Data.DbType.Int32)
				{
					s = s + "\n\t\t\t\t";
					s = s+"  paramArray["+iParamSeq+"].Value="+ FormatParamClassName(SourceTable)+"Info."+GetFormatPropertyName(SourceTable.Columns[i])+";"+"\n\t\t\t\t";
				}
				else if(table.Columns[i].DataType == System.Data.DbType.Decimal)
				{	
					s = s + "\n\t\t\t\t";
					s = s+"  paramArray["+iParamSeq+"].Value="+ FormatParamClassName(SourceTable)+"Info."+GetFormatPropertyName(SourceTable.Columns[i])+";"+"\n\t\t\t\t";					
				}
				else if(table.Columns[i].DataType == System.Data.DbType.AnsiString)
				{	
					s = s + "\n\t\t\t\t";
					s = s+"  paramArray["+iParamSeq+"].Value="+ FormatParamClassName(SourceTable)+"Info."+GetFormatPropertyName(SourceTable.Columns[i])+";"+"\n\t\t\t\t";					
				}
				else if(table.Columns[i].DataType == System.Data.DbType.AnsiStringFixedLength)//Char类型
				{	
					s = s +"\n\t\t\t\t"+"if(!string.IsNullOrEmpty("+FormatParamClassName(SourceTable)+"Info."+GetFormatPropertyName(SourceTable.Columns[i])+"))"+"\n\t\t\t\t";
					s = s+"  paramArray["+iParamSeq+"].Value="+ FormatParamClassName(SourceTable)+"Info."+GetFormatPropertyName(SourceTable.Columns[i])+";"+"\n\t\t\t\t";
					s=s+"else"+"\n\t\t\t\t";
					s=s+"  paramArray["+iParamSeq+"].Value="+"DBNull.Value"+";"+"\n\t\t\t\t";					
				}				
			}
			else
			{
				if(GetPropertyName(table.Columns[i]) != "CREATED_DATE")
				{
					s = s + "\n\t\t\t\t";
					s = s +"  paramArray["+iParamSeq+"].Value="+ FormatParamClassName(SourceTable)+"Info."+GetFormatPropertyName(SourceTable.Columns[i])+";"+"\n\t\t\t\t";
				}
				else
				{
					s = s + "\n\t\t\t\t";
					s = s +"  paramArray["+iParamSeq+"].Value=DateTime.Now;"+"\n\t\t\t\t";  
				}
			}
		}
		//string a = Convert.ToString(table.Columns[5].DataType);
		return s;	
	}
	
	public string GetFormatPropertyName(SchemaObjectBase schemaObject)
	{
		bool isHasChar = false;
        string temp = "";
		string str = GetPropertyName(schemaObject.Name);
		
        if (str.Contains("_"))
        {

            string s1 = str.Substring(0, str.LastIndexOf("_"));
            string s2 = str.Substring(str.LastIndexOf("_"), str.Length - str.LastIndexOf("_"));

            if (s2 == "_ID" || s2 == "_GID")
            {
                str = s1;
                isHasChar = true;
            }

            str = str.ToLower();

            char[] array = str.ToCharArray();

            for (int i = 0; i < array.Length; i++)
            {
                if (i == 0)
                {
                    array[0] = Convert.ToChar(array[0].ToString().ToUpper());
                }

                if (array[i].ToString() == "_")
                {
                    array[i + 1] = Convert.ToChar(array[i + 1].ToString().ToUpper());
                }
                temp += array[i].ToString();
            }

            if (s2 != "" && isHasChar == true)
                temp += s2;
            
            temp = temp.Replace("_", "");
        }
        else
		{         
			//temp = str;
			char[] tempArray = str.ToLower().ToCharArray();
                for (int n = 0; n < tempArray.Length; n++)
                {
                    if (n == 0)
                    {
                        tempArray[n] = Convert.ToChar(tempArray[n].ToString().ToUpper());                        
                    }
                    temp += tempArray[n].ToString();
                }
		}
		return temp;
	}
	
</script>