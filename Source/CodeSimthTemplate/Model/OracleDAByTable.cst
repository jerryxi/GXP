<%@ CodeTemplate Language="C#" TargetLanguage="C#" ResponseEncoding="UTF-8" Src="..\CommonSqlCode.cs" Inherits="MoM.Templates.CommonSqlCode" Debug="False" Description="Template description here." %>
<%@ Property Name="DevelopersName" Type="String" Category="Context" Description="The name to include in the comment header" %>
<%@ Property Name="NameSpace" Type="String" Category="Context"  Description="The namespace to use for this class" %>
<%@ Property Name="SourceDatabase" Type="SchemaExplorer.DatabaseSchema" Category="Context" Optional="false" Description="Database that the documentation should be based on." %>
<%@ Property Name="SourceTable" Type="SchemaExplorer.TableSchema" Category="Context" Description="Table that the object is based on." %>
<%@ Property Name="DetailTable" Type="SchemaExplorer.TableSchema" Category="Context" Optional="True" Description="Table that the object is based on." %>
<%@ Property Name="StoreProcedure" Type="SchemaExplorer.CommandSchema " Category="Context" Optional="True" Description="Table that the object is based on." %>
<%@ Property Name="View" Type="SchemaExplorer.ViewSchema " Category="Context" Optional="True" Description="Table that the object is based on." %>

<%@ Assembly Name="System.Data" %>
<%@ Assembly Name="SchemaExplorer" %>

<%@ Import Namespace="System.Data" %>
<%@ Import Namespace="SchemaExplorer" %>
/*----------------------------------------------------------------
//
// Copyright (C) 2009 上海科箭软件科技有限公司版权所有。  
// 
//
// 文件名：<%=FormatClassName(SourceTable) %>DA
// 文件功能描述：提供<%=FormatClassName(SourceTable) %>数据表进行操作的一些方法
//
// 创建标识：<%=DevelopersName %> <%=DateTime.Now.ToShortDateString() %>  
//
// 修改标识：
// 修改描述：
// 
//----------------------------------------------------------------*/

using System;
using System.Collections;
using System.Collections.Generic;
using System.Data;
using System.Data.Common;
using System.Data.OracleClient;

using WMS6.IDAL;
using WMS6.DBUtility;
using WMS6.Common;
using WMS6.DataEntity;
using WMS6.QueryEntity;

namespace <%= NameSpace %>
{	
 	public class <%=FormatClassName(SourceTable) %>DA : I<%=FormatClassName(SourceTable) %>DA
 	{
		#region 私有成员
		 <% for (int i = 0; i < SourceTable.Columns.Count; i++) { if(GetPropertyName(SourceTable.Columns[i]) != "ROWID" && GetPropertyName(SourceTable.Columns[i]) != "CREATED_DATE" 
        && GetPropertyName(SourceTable.Columns[i]) != "UPDATED_DATE"
        && GetPropertyName(SourceTable.Columns[i]) != "TS"){%>
		private string <%= GetPropertyName(SourceTable.Columns[i]) %> = ":<%=GetPropertyName(SourceTable.Columns[i])%>";
		<% } } %>
		#endregion
        
		#region SQL语句
		//SELECT_SQL 得到 <%=FormatClassName(SourceTable) %> 的所有记录
	  	private string SQL_SELECT_ALL_<%=GetEntityClassName(SourceTable).ToUpper()%> = "<%=GetSelectSQLString(SourceTable)%> ";
      	//INSERT_SQL 向<%=FormatClassName(SourceTable) %>增加一条记录
		private string SQL_INSERT_<%=GetEntityClassName(SourceTable).ToUpper()%> = <%=GetInsertSQLString(SourceTable)%> ";
     	//DELETE_SQL  删除<%=FormatClassName(SourceTable) %>一条记录
		private string SQL_DELETE_<%=GetEntityClassName(SourceTable).ToUpper()%> = " DELETE FROM @_@<%=GetEntityClassName(SourceTable)%> WHERE <%=GenPrimaryKeyParamValue1(SourceTable)%>";
      	//UPDATE_SQL 更新<%=FormatClassName(SourceTable) %>记录
		private string SQL_UPDATE_<%=GetEntityClassName(SourceTable).ToUpper()%> = <%=GetUpdateSQLString(SourceTable)%>
		
		//判断一个<%=GetEntityClassName(SourceTable).ToUpper()%>_ID是否已存在
		private string SQL_CHECK_<%=GetEntityClassName(SourceTable).ToUpper()%>_ID_UNIQUE = " SELECT COUNT(1) FROM @_@<%=GetEntityClassName(SourceTable) %> WHERE <%=GenPrimaryKeyParamValue1(SourceTable)%>";
		#endregion		
		
		#region 方法
		
		#region 得到<%=FormatClassName(SourceTable) %>的所有记录

        /// <summary>
        /// 得到所有的<%=FormatClassName(SourceTable) %>记录
        /// </summary>
        /// <param name="whLoginID">要查询的仓库的前缀</param>
        /// <returns>所有的<%=FormatClassName(SourceTable) %>记录</returns>
		public DataSet GetAll<%=FormatClassName(SourceTable) %>(string whLoginID)
		{			
			string sql = SQL_SELECT_ALL_<%=GetEntityClassName(SourceTable).ToUpper()%>.Replace("@_@", whLoginID);
			return DBHelper.ExecuteDataSet(CommandType.Text, sql);
		}
		
		/// <summary>
        /// 得到所有的<%=FormatClassName(SourceTable) %>记录
        /// </summary>
        /// <param name="dataBase">DataBase对象</param>
        /// <param name="tran">一个有效的DbTransaction</param>
        /// <param name="whLoginID">要查询的仓库的前缀</param>
        /// <returns>所有的<%=FormatClassName(SourceTable) %>记录</returns>
		public DataSet GetAll<%=FormatClassName(SourceTable) %>(DataBase dataBase, DbTransaction tran, string whLoginID)
		{
			string sql = SQL_SELECT_ALL_<%=GetEntityClassName(SourceTable).ToUpper()%>.Replace("@_@", whLoginID); 
            return dataBase.ExecuteDataSet(tran, CommandType.Text, sql); 
		}
		
		#endregion		
		
		#region 根据条件查询<%=FormatClassName(SourceTable) %>的记录  Get<%=FormatClassName(SourceTable) %>ByQueryList()

        /// <summary>
        /// 根据查询条件得到<%=FormatClassName(SourceTable) %>记录
        /// </summary>
        /// <param name="sqlWhere">查询条件集合</param>
        /// <param name="<%=FormatClassName(SourceTable) %>QueryEntity"><%=FormatClassName(SourceTable) %>查询实体类</param>
        /// <param name="whLoginID">要查询的仓库的前缀</param>
        /// <returns>根据查询条件得到<%=FormatClassName(SourceTable) %>记录</returns>
		public DataSet Get<%=FormatClassName(SourceTable) %>ByQueryList(List<string> sqlWhere,<%=FormatClassName(SourceTable) %>QueryEntity <%=FormatClassName(SourceTable).ToLower() %>Query, string whLoginID)
		{
			string temp = SQL_SELECT_ALL_<%=GetEntityClassName(SourceTable).ToUpper()%>.Replace("@_@", whLoginID);

            for (int i = 0; i < sqlWhere.Count; i++)
            {
                if (i == 0)
                {
                    temp += " WHERE " + sqlWhere[i].ToString();
                    continue;
                }
                else
                {
                    temp += " AND " + sqlWhere[i].ToString();
                }
            }

            if (!<%=FormatClassName(SourceTable).ToLower() %>Query.IsGetAll)
            {
                PagingHelper2 ph = new PagingHelper2();
                return ph.GetPagingDataSet(temp, <%=FormatClassName(SourceTable).ToLower() %>Query.CurrentPage, <%=FormatClassName(SourceTable).ToLower() %>Query.PageSize, <%=FormatClassName(SourceTable).ToLower() %>Query.SortField, <%=FormatClassName(SourceTable).ToLower() %>Query.SortDirection);
            }
            else
            {
                return DBHelper.ExecuteDataSet(CommandType.Text, temp);
            }
		}
		
		/// <summary>
        /// 根据查询条件得到<%=FormatClassName(SourceTable) %>记录
        /// </summary>
        /// <param name="dataBase">DataBase对象</param>
        /// <param name="tran">一个有效的DbTransaction</param>
        /// <param name="sqlWhere">查询条件集合</param>
        /// <param name="<%=FormatClassName(SourceTable) %>QueryEntity"><%=FormatClassName(SourceTable) %>查询实体类</param>
        /// <param name="whLoginID">要查询的仓库的前缀</param>
        /// <returns>根据查询条件得到<%=FormatClassName(SourceTable) %>记录</returns>
		public DataSet Get<%=FormatClassName(SourceTable) %>ByQueryList(DataBase dataBase, DbTransaction tran, List<string> sqlWhere, <%=FormatClassName(SourceTable) %>QueryEntity <%=FormatClassName(SourceTable).ToLower() %>Query, string whLoginID)
		{
			string temp = SQL_SELECT_ALL_<%=GetEntityClassName(SourceTable).ToUpper()%>.Replace("@_@", whLoginID);

            for (int i = 0; i < sqlWhere.Count; i++)
            {
                if (i == 0)
                {
                    temp += " WHERE " + sqlWhere[i].ToString();
                    continue;
                }
                else
                {
                    temp += " AND " + sqlWhere[i].ToString();
                }
            }

            if (!<%=FormatClassName(SourceTable).ToLower() %>Query.IsGetAll)
            {
                PagingHelper2 ph = new PagingHelper2();
                return ph.GetPagingDataSet(dataBase, tran, temp, <%=FormatClassName(SourceTable).ToLower() %>Query.CurrentPage, <%=FormatClassName(SourceTable).ToLower() %>Query.PageSize, <%=FormatClassName(SourceTable).ToLower() %>Query.SortField, <%=FormatClassName(SourceTable).ToLower() %>Query.SortDirection);
            }
            else
            {
                return dataBase.ExecuteDataSet(tran, CommandType.Text, temp);
            }
		}
		
		#endregion		
		
		#region  根据ID查询<%=FormatClassName(SourceTable) %>的一条记录 Get<%=FormatClassName(SourceTable) %>ByID()

        /// <summary>
        /// 根据<%=FormatClassName(SourceTable).ToLower() %>ID得到一条<%=FormatClassName(SourceTable) %>记录
        /// </summary>
        /// <param name="<%=FormatClassName(SourceTable).ToLower() %>ID"><%=FormatClassName(SourceTable).ToLower() %>ID</param>
        /// <param name="whLoginID">要查询的仓库的前缀</param>
        /// <returns>根据<%=FormatClassName(SourceTable).ToLower() %>ID得到一条<%=FormatClassName(SourceTable) %>记录</returns>
		public <%=FormatClassName(SourceTable) %>Info Get<%=FormatClassName(SourceTable) %>ByID(string <%=FormatClassName(SourceTable).ToLower() %>ID, string whLoginID)
		{			 
			string sql = SQL_SELECT_ALL_<%=GetEntityClassName(SourceTable).ToUpper()%>.Replace("@_@", whLoginID) + " WHERE <%=GenPrimaryKeyParamValue1(SourceTable)%> ";  
		    OracleParameter[] paras = new OracleParameter[] { new OracleParameter("@<%=GetPrimaryKey(SourceTable).ToUpper()%>", <%=FormatClassName(SourceTable).ToLower() %>ID) };		
			<%=FormatClassName(SourceTable)%>Info <%=FormatParamClassName(SourceTable) %>Info = null;
			
			using (IDataReader reader = DBHelper.ExecuteReader(CommandType.Text, sql, paras))
            {
                if (reader.Read())
                {
                    <%=FormatParamClassName(SourceTable) %>Info = new <%=FormatClassName(SourceTable)%>Info(<%=GetSQLDataReaderString(SourceTable)%>);
                }
            }
           
            return <%=FormatParamClassName(SourceTable) %>Info;
		}		
		/// <summary>
        /// 根据<%=FormatClassName(SourceTable).ToLower() %>ID得到一条<%=FormatClassName(SourceTable) %>记录
        /// </summary>
        /// <param name="dataBase">DataBase对象</param>
        /// <param name="tran">一个有效的DbTransaction</param>
        /// <param name="<%=FormatClassName(SourceTable).ToLower() %>ID"><%=FormatClassName(SourceTable).ToLower() %>ID</param>
        /// <param name="whLoginID">要查询的仓库的前缀</param>
        /// <returns>根据<%=FormatClassName(SourceTable).ToLower() %>ID得到一条<%=FormatClassName(SourceTable) %>记录</returns>
		public <%=FormatClassName(SourceTable) %>Info Get<%=FormatClassName(SourceTable) %>ByID(DataBase dataBase, DbTransaction tran, string <%=FormatClassName(SourceTable).ToLower() %>ID, string whLoginID)
		{
			string sql = SQL_SELECT_ALL_<%=GetEntityClassName(SourceTable).ToUpper()%>.Replace("@_@", whLoginID) + " WHERE <%=GenPrimaryKeyParamValue1(SourceTable)%> ";  
            OracleParameter[] paras = new OracleParameter[] { new OracleParameter("@<%=GetPrimaryKey(SourceTable).ToUpper()%>", <%=FormatClassName(SourceTable).ToLower() %>ID) };
            <%=FormatClassName(SourceTable)%>Info <%=FormatParamClassName(SourceTable) %>Info = null;
            
			IDataReader reader = dataBase.ExecuteReader(tran, CommandType.Text, sql, paras);
            if (reader.Read())
            {
                <%=FormatParamClassName(SourceTable) %>Info = new <%=FormatClassName(SourceTable)%>Info(<%=GetSQLDataReaderString(SourceTable)%>);
            }
            if (!reader.IsClosed)
            {
                reader.Close();
            }
			
            return <%=FormatParamClassName(SourceTable) %>Info;	
		}
		
		#endregion
		
		#region 向<%=FormatClassName(SourceTable) %>增加一条记录 Insert<%=FormatClassName(SourceTable) %>()

        /// <summary>
        /// 新增一条<%=FormatClassName(SourceTable) %>记录
        /// </summary>
        /// <param name="<%=FormatClassName(SourceTable).ToLower() %>"><%=FormatClassName(SourceTable) %>对象</param>
        /// <param name="whLoginID">要查询的仓库的前缀</param>
        /// <returns>执行新增对数据库影响的行数</returns>
		public int Insert<%=FormatClassName(SourceTable) %>(<%=FormatClassName(SourceTable) %>Info <%=FormatParamClassName(SourceTable) %>Info, string whLoginID)
		{
			int result = 0;
            <%=FormatParamClassName(SourceTable) %>Info.WhID = whLoginID.Substring(0, whLoginID.Length - 1);
            OracleParameter[] paras = Set_<%=FormatClassName(SourceTable)%>_Parameters(<%=FormatParamClassName(SourceTable) %>Info);
			if (paras != null)
            {
                result += DBHelper.ExecuteNonQuery(CommandType.Text, SQL_INSERT_<%=GetEntityClassName(SourceTable).ToUpper()%>.Replace("@_@", whLoginID), paras);
            }
            return result;
        }
		
		/// <summary>
        /// 新增一条<%=FormatClassName(SourceTable) %>记录
        /// </summary>
        /// <param name="dataBase">DataBase对象</param>
        /// <param name="tran">一个有效的DbTransaction</param>
        /// <param name="<%=FormatParamClassName(SourceTable) %>"><%=FormatClassName(SourceTable) %>对象</param>
        /// <param name="whLoginID">要查询的仓库的前缀</param>
        /// <returns>执行新增对数据库影响的行数</returns>
		public int Insert<%=FormatClassName(SourceTable) %>(DataBase dataBase, DbTransaction tran, <%=FormatClassName(SourceTable) %>Info <%=FormatParamClassName(SourceTable) %>Info, string whLoginID)
		{
			int result = 0;
            <%=FormatParamClassName(SourceTable) %>Info.WhID = whLoginID.Substring(0, whLoginID.Length - 1);
            OracleParameter[] paras = Set_<%=FormatClassName(SourceTable)%>_Parameters(<%=FormatParamClassName(SourceTable) %>Info);
            if (paras != null)
            {
                result += dataBase.ExecuteNonQuery(tran, CommandType.Text, SQL_INSERT_<%=GetEntityClassName(SourceTable).ToUpper()%>.Replace("@_@", whLoginID), paras);
            }
            return result;
		}
		#endregion
		
		#region 删除<%=FormatClassName(SourceTable) %>一条或多条记录 Delete<%=FormatClassName(SourceTable) %>()

        /// <summary>
        /// 删除一条<%=FormatClassName(SourceTable) %>记录
        /// </summary>
        /// <param name="<%=FormatClassName(SourceTable).ToLower() %>ID"><%=FormatClassName(SourceTable) %>ID</param>
        /// <param name="whLoginID">要查询的仓库的前缀</param>
        /// <returns>执行删除对数据库影响的行数</returns>
		public int Delete<%=FormatClassName(SourceTable) %>(List<string> <%=FormatParamClassName(SourceTable) %>ID, string whLoginID)
        {
            int result = 0;

            DataBase dataBase = new DataBase();
            DbConnection conn = dataBase.connection;
            conn.Open();
            DbTransaction tran = conn.BeginTransaction();

            try
            {
                for (int j = 0; j < <%=FormatParamClassName(SourceTable) %>ID.Count; j++)
                {
                    OracleParameter[] paras = new OracleParameter[] { new OracleParameter("@<%=GetPrimaryKey(SourceTable).ToUpper()%>", <%=FormatParamClassName(SourceTable) %>ID[j]) };
                    result += dataBase.ExecuteNonQuery(tran, CommandType.Text, SQL_DELETE_<%=GetEntityClassName(SourceTable).ToUpper()%>.Replace("@_@", whLoginID), paras);
                }
                tran.Commit();
            }
            catch (OracleException sqlEx)
            {
                tran.Rollback();
                CommonErrorHandler.ErrorHandler(sqlEx, LogType.Error);
            }
            finally
            {
                conn.Close();
            }
            return result;
        }
		
		/// <summary>
        /// 删除一条<%=FormatClassName(SourceTable) %>记录
        /// </summary>
        /// <param name="dataBase">DataBase对象</param>
        /// <param name="tran">一个有效的DbTransaction</param>
        /// <param name="<%=FormatClassName(SourceTable).ToLower() %>ID"><%=FormatClassName(SourceTable) %>ID</param>
        /// <param name="whLoginID">要查询的仓库的前缀</param>
        /// <returns>执行删除对数据库影响的行数</returns>
		public int Delete<%=FormatClassName(SourceTable) %>(DataBase dataBase, DbTransaction tran, List<string> <%=FormatParamClassName(SourceTable) %>ID, string whLoginID)
		{
			int result = 0;
            try
            {
                for (int j = 0; j < <%=FormatParamClassName(SourceTable) %>ID.Count; j++)
                {
                    OracleParameter[] paras = new OracleParameter[] { new OracleParameter("@<%=GetPrimaryKey(SourceTable).ToUpper()%>", <%=FormatParamClassName(SourceTable) %>ID[j]) };
                    result += dataBase.ExecuteNonQuery(tran, CommandType.Text, SQL_DELETE_<%=GetEntityClassName(SourceTable).ToUpper()%>.Replace("@_@", whLoginID), paras);
                }
            }
            catch (OracleException sqlEx)
            {
                CommonErrorHandler.ErrorHandler(sqlEx, LogType.Error);
            }
            return result;
		}
		#endregion
		
		#region 更新一条<%=FormatClassName(SourceTable) %>记录 Update<%=FormatClassName(SourceTable) %>()
		/// <summary>
        /// 更新一条<%=FormatClassName(SourceTable) %>记录
        /// </summary>
        /// <param name="<%=FormatClassName(SourceTable).ToLower() %>"><%=FormatClassName(SourceTable) %>对象</param>
        /// <param name="whLoginID">要查询的仓库的前缀</param>
        /// <returns>执行更新对数据库影响的行数</returns>
		public int Update<%=FormatClassName(SourceTable) %>(<%=FormatClassName(SourceTable) %>Info <%=FormatParamClassName(SourceTable) %>Info, string whLoginID)
		{
			int result = 0;
            <%=FormatParamClassName(SourceTable) %>Info.WhID = whLoginID.Substring(0, whLoginID.Length - 1);
            OracleParameter[] paras = Set_<%=FormatClassName(SourceTable)%>_Parameters(<%=FormatParamClassName(SourceTable) %>Info);
            if (paras != null)
            {
                result += DBHelper.ExecuteNonQuery(CommandType.Text, SQL_UPDATE_<%=GetEntityClassName(SourceTable).ToUpper()%>.Replace("@_@", whLoginID), paras);
            }
            return result;
		}
		
        /// <summary>
        /// 更新一条<%=FormatClassName(SourceTable) %>记录
        /// </summary>
        /// <param name="dataBase">DataBase对象</param>
        /// <param name="tran">一个有效的DbTransaction</param>
        /// <param name="<%=FormatClassName(SourceTable).ToLower() %>"><%=FormatClassName(SourceTable) %>对象</param>
        /// <param name="whLoginID">要查询的仓库的前缀</param>
        /// <returns>执行更新对数据库影响的行数</returns>
		public int Update<%=FormatClassName(SourceTable) %>(DataBase dataBase, DbTransaction tran, <%=FormatClassName(SourceTable) %>Info <%=FormatParamClassName(SourceTable) %>Info, string whLoginID)
        {
            int result = 0;
            try
            {
                <%=FormatParamClassName(SourceTable) %>Info.WhID = whLoginID.Substring(0, whLoginID.Length - 1);
                OracleParameter[] paras = Set_<%=FormatClassName(SourceTable)%>_Parameters(<%=FormatParamClassName(SourceTable) %>Info);
                if (paras != null)
                {
                    result += dataBase.ExecuteNonQuery(tran, CommandType.Text, SQL_UPDATE_<%=GetEntityClassName(SourceTable).ToUpper()%>.Replace("@_@", whLoginID), paras);
                }
            }
            catch (OracleException sqlEx)
            {
                CommonErrorHandler.ErrorHandler(sqlEx, LogType.Error);
            }
            return result;
        }
		#endregion
		
		#region 根据<%=GetPrimaryKey(SourceTable).ToUpper()%>判断此ID在表<%=GetEntityClassName(SourceTable) %>中是否已存在
						
		/// <summary>
        /// 检查<%=FormatClassName(SourceTable) %>ID是否已存在
        /// </summary>
        /// <param name="<%=FormatClassName(SourceTable).ToLower() %>ID"><%=FormatClassName(SourceTable) %>ID</param>
        /// <param name="whLoginID">要查询的仓库的前缀</param>
        /// <returns>True:存在  False:不存在</returns>
		public bool Check<%=FormatClassName(SourceTable) %>IDUnique(string <%=FormatParamClassName(SourceTable) %>ID, string whLoginID)
		{
			OracleParameter[] paras = new OracleParameter[] { new OracleParameter("@<%=GetPrimaryKey(SourceTable).ToUpper()%>", <%=FormatParamClassName(SourceTable)%>ID) };
            object obj = DBHelper.ExecuteScalar(CommandType.Text, SQL_CHECK_<%=GetEntityClassName(SourceTable).ToUpper()%>_ID_UNIQUE.Replace("@_@", whLoginID), paras);
            if (obj.ToString() == "1")
                return true;
            else
                return false;
		}
		
		/// <summary>
        /// 检查<%=FormatClassName(SourceTable) %>ID是否已存在
        /// </summary>
        /// <param name="dataBase">DataBase对象</param>
        /// <param name="tran">一个有效的DbTransaction</param>
        /// <param name="<%=FormatClassName(SourceTable).ToLower() %>ID"><%=FormatParamClassName(SourceTable) %>ID</param>
        /// <param name="whLoginID">要查询的仓库的前缀</param>
        /// <returns>True:存在  False:不存在</returns>
		public bool Check<%=FormatClassName(SourceTable) %>IDUnique(DataBase dataBase, DbTransaction tran, string <%=FormatParamClassName(SourceTable) %>ID, string whLoginID)
		{
			OracleParameter[] paras = new OracleParameter[] { new OracleParameter("@<%=GetPrimaryKey(SourceTable).ToUpper()%>", <%=FormatParamClassName(SourceTable)%>ID) };
            object obj = dataBase.ExecuteScalar(tran, CommandType.Text, SQL_CHECK_<%=GetEntityClassName(SourceTable).ToUpper()%>_ID_UNIQUE.Replace("@_@", whLoginID), paras);
            if (obj.ToString() == "1")
                return true;
            else
                return false;
		}
		#endregion
		
		#region 设置SQL参数表 Set_<%=FormatClassName(SourceTable) %>_Parameters()

        /// <summary>
        /// 设置SQL参数表
        /// </summary>
        /// <param name="<%=FormatClassName(SourceTable) %>"><%=FormatClassName(SourceTable) %>对象</param>
        /// <returns><%=FormatClassName(SourceTable) %>参数数组</returns>
      	private OracleParameter[] Set_<%=FormatClassName(SourceTable)%>_Parameters(<%=FormatClassName(SourceTable) %>Info <%=FormatParamClassName(SourceTable) %>Info)
	  	{
			OracleParameter[] paramArray = new OracleParameter[] {<%=SetSqlparam(SourceTable)%>
		                                                	};
			<%=SetSqlparamArray(SourceTable)%>
	     	return paramArray;
	  	}
		#endregion
		
		#endregion
	}
}
<script runat="template">

//Note :生成DAL层的方法
//Create By : Jerry
//Create Date : 2008-07-05

	public string GetUpdateSQLString(SchemaObjectBase schemaObject)
	{
		string pramaryKey = GetEntityClassName(SourceTable)+"_GID";
		string sql = "\" UPDATE @_@"+GetEntityClassName(SourceTable) + " SET ";
		for(int i=0;i<SourceTable.Columns.Count;i++)
		{
			
			if ( GetPropertyName(SourceTable.Columns[i]) == "ROWID")
			{
				continue;
			}
			//else if ( GetPropertyName(SourceTable.Columns[i]) == "CREATED_BY")
			//{
			//	continue;
			//}
            if ( GetPropertyName(SourceTable.Columns[i]) == "TS")
			{
				string temp = GetPropertyName(SourceTable.Columns[i]);
				sql +=  temp+" = SYSTIMESTAMP, ";
			}
		    else if ( GetPropertyName(SourceTable.Columns[i]) == "CREATED_DATE")
			{
				continue;
			}            
			else if ( SourceTable.Columns[i].IsPrimaryKeyMember == true)
			{
				continue;
			}
			else if ( GetPropertyName(SourceTable.Columns[i]) == "UPDATED_DATE")
			{
				string temp = GetPropertyName(SourceTable.Columns[i]);
				sql += temp + " = SYSDATE, ";
				continue;
			}			
			else
			{
				string temp = GetPropertyName(SourceTable.Columns[i]);
				sql +=  temp+" = :"+temp+", ";
			}
		}
		sql = sql.Substring(0,sql.LastIndexOf(","));
		sql += " WHERE " + GenPrimaryKeyParamValue1(SourceTable) + " \";";
		return sql;
        
	}
	
	//得到新增的SQL语句
	public string GetInsertSQLString(SchemaObjectBase schemaObject)
	{
		string pramaryKey = GetEntityClassName(SourceTable);
		string sql = "\" INSERT INTO @_@" + GetEntityClassName(SourceTable) + " ( ";
		       
		for(int i=0;i<SourceTable.Columns.Count;i++)
		{			
			if(GetPropertyName(SourceTable.Columns[i]).ToUpper() != "ROWID" 
            && SourceTable.Columns[i].IsPrimaryKeyMember == false 
            && i != SourceTable.Columns.Count - 1)
			{
				//if(i == SourceTable.Columns.Count - 1)
				//{
				//	sql += GetPropertyName(SourceTable.Columns[i]) + ") VALUES ( ";
				//}
				//else
				//{
					sql += GetPropertyName(SourceTable.Columns[i]) + ", ";
				//}
			}
			if(i == SourceTable.Columns.Count - 1)
			{
				sql += GetPropertyName(SourceTable.Columns[i]) + ", ";
                sql += GetPrimaryKey4Insert_1(SourceTable) + ") VALUES ( ";
			}
		}
		
		for(int i=0;i<SourceTable.Columns.Count;i++)
		{
			if(GetPropertyName(SourceTable.Columns[i]).ToUpper() == "CREATED_DATE" 
            || GetPropertyName(SourceTable.Columns[i]).ToUpper() == "UPDATED_DATE")
			{
				if(i == SourceTable.Columns.Count - 1)
				{
					sql += "SYSDATE, " + GetPrimaryKey4Insert_2(SourceTable) + ") ";
				}
				else
				{
					sql += "SYSDATE, ";
					}
			}
            else if(GetPropertyName(SourceTable.Columns[i]).ToUpper() == "TS")
            {
                if(i == SourceTable.Columns.Count - 1)
				{
					sql += "SYSTIMESTAMP, " + GetPrimaryKey4Insert_2(SourceTable) + ") ";
				}
				else
				{
					sql += "SYSTIMESTAMP, ";
					}
            }
			else
			{
				if(GetPropertyName(SourceTable.Columns[i]).ToUpper() != "ROWID" 
                && SourceTable.Columns[i].IsPrimaryKeyMember == false
                && i != SourceTable.Columns.Count - 1)
				{
					sql += ":" + GetPropertyName(SourceTable.Columns[i]) + ", ";
				}
				if(i == SourceTable.Columns.Count - 1)
				{
					sql += ":" + GetPropertyName(SourceTable.Columns[i]) + ", ";
                    sql +=  GetPrimaryKey4Insert_2(SourceTable) + ") ";
				}
			}
		}
		
		return sql;
	}
	
    //得到查询的SQL语句
    public string GetSelectSQLString(SchemaObjectBase schemaObject)
    {
        string sql = "SELECT ROWNUM, ";
        string tableName = GetEntityClassName(SourceTable);
        string shortTableName = GetTableShortName(SourceTable);
        for(int i=0;i<SourceTable.Columns.Count;i++)
		{
            sql += shortTableName+"."+GetPropertyName(SourceTable.Columns[i])+" AS "+GetPropertyName(SourceTable.Columns[i])+", ";
        }
        sql = sql.Substring(0,sql.Length-2) + " FROM @_@" + tableName + " WT";        
        return sql;
    }
    
    //得到表的缩写（首字母）
    public string GetTableShortName(SchemaObjectBase schemaObject)
    {
        string str = "";
        string tableName = GetEntityClassName(SourceTable);
        string[] lst = tableName.Split(new char[]{'_'});
        for(int i=0;i<lst.Length;i++)
        {
            str += lst[i].Substring(0,1);
            }
        return str;
    }
    
	public string GetSQLDataReaderString(SchemaObjectBase schemaObject)
	{
		int count = SourceTable.Columns.Count;
		string str = "reader[\"@\"].ToString()";
		string temp = "reader[\"ROWNUM\"].ToString() != \"\" ? Int32.Parse(reader[\"ROWNUM\"].ToString()) : 0, ";
		
		for(int i=0;i<count;i++)
		{		
			if(SourceTable.Columns[i].DataType==System.Data.DbType.DateTime)
			{
				temp+=str.Replace("@",GetPropertyName(SourceTable.Columns[i]))+"!=\"\" ? "+"DateTime.Parse("+str.Replace("@",GetPropertyName(SourceTable.Columns[i]))+"):new DateTime(),";
			}
			else if (SourceTable.Columns[i].DataType==System.Data.DbType.Decimal)
			{
				temp+=str.Replace("@",GetPropertyName(SourceTable.Columns[i]))+"!=\"\" ? "+"Decimal.Parse("+str.Replace("@",GetPropertyName(SourceTable.Columns[i]))+"):0,";
			}
			else if (SourceTable.Columns[i].DataType==System.Data.DbType.Double)
			{
				temp+=str.Replace("@",GetPropertyName(SourceTable.Columns[i]))+"!=\"\" ? "+"float.Parse("+str.Replace("@",GetPropertyName(SourceTable.Columns[i]))+"):0,";
			}
			else if(SourceTable.Columns[i].DataType == System.Data.DbType.Int16)
			{
				temp+=str.Replace("@",GetPropertyName(SourceTable.Columns[i]))+"!=\"\" ? "+"Int32.Parse("+str.Replace("@",GetPropertyName(SourceTable.Columns[i]))+"):0,";
			}
			else if(SourceTable.Columns[i].DataType == System.Data.DbType.Binary)
			{
				string s = str.Substring(0, str.IndexOf("."));
				temp+=s.Replace("@",GetPropertyName(SourceTable.Columns[i]))+",";
			}
			else
            {
				temp += str.Replace("@",GetPropertyName(SourceTable.Columns[i]))+",";			
            }
            temp += "\t\t\t\t\n";
		}
		
		temp = temp.Substring(0, temp.LastIndexOf(","));
		
		return temp;
	}
	//格式化类名
	public string FormatClassName(SchemaObjectBase schemaObject)
	{
		string str="";
		str=GetClassName(schemaObject.Name);
		str=str.ToLower();
		string temp = "";
		char[] array = str.ToCharArray();
        for (int i = 0; i < array.Length; i++)
        {
            if (i == 0)
            {
                array[0] = Convert.ToChar(array[0].ToString().ToUpper());                    
            }
          
            if (array[i].ToString() == "_")
            {
                array[i + 1] = Convert.ToChar(array[i + 1].ToString().ToUpper());
            } 
            temp += array[i].ToString();
        }
		if(temp.Contains("_"))
        	temp = temp.Replace("_", "");
			
		return temp;
	}
	//???????????????????
	public string FormatParamClassName(SchemaObjectBase schemaObject)
	{
		string str="";
		str=GetClassName(schemaObject.Name);
		str=str.ToLower();
		string temp = "";
		char[] array = str.ToCharArray();
        for (int i = 0; i < array.Length; i++)
        {
            //if (i == 0)
            //{
            //    array[0] = Convert.ToChar(array[0].ToString().ToUpper());                    
            //}
          
            if (array[i].ToString() == "_")
            {
                array[i + 1] = Convert.ToChar(array[i + 1].ToString().ToUpper());
            } 
            temp += array[i].ToString();
        }
        temp = temp.Replace("_", "");
		return temp;
	}
    public string GetPrimaryKey4Insert_1(TableSchema table)
    {
        string s="";
		if(table.PrimaryKey != null)
		{
			for(int i=0;i<table.PrimaryKey.MemberColumns.Count ;i++)
			{
                string s2 = GetMemberVariableName(table.PrimaryKey.MemberColumns[i]).ToString().ToUpper();
				s=s+ s2.Substring(1,s2.Length-1) +", ";                
			}
		}
		else
		{
			throw new ApplicationException("This template will only work on tables with a primary key.");
		}		
		s=s.Substring(0,s.Length-2);
		return s;
    }
    public string GetPrimaryKey4Insert_2(TableSchema table)
    {
        string s="";
		if(table.PrimaryKey != null)
		{
			for(int i=0;i<table.PrimaryKey.MemberColumns.Count ;i++)
			{
                string s2 = GetMemberVariableName(table.PrimaryKey.MemberColumns[i]).ToString().ToUpper();
				s=s+ ":" + s2.Substring(1,s2.Length-1) +", ";                
			}
		}
		else
		{
			throw new ApplicationException("This template will only work on tables with a primary key.");
		}		
		s=s.Substring(0,s.Length-2);
		return s;
    }
    public string GenPrimaryKey4Update(TableSchema table)
		{
			string s = "";
			if (table.PrimaryKey != null)
			{
				for(int i = 0; i < table.PrimaryKey.MemberColumns.Count; i++)
				{
					s = s + GetCamelCaseName(GetSafeName(table.PrimaryKey.MemberColumns[i])) + " = " +"@"+GetCamelCaseName(GetSafeName(table.PrimaryKey.MemberColumns[i]))+" AND ";
				}
			}
			else
			{
				throw new ApplicationException("This template will only work on tables with a primary key.");
			}
			//s = s.Remove(s.Length - 1, 1);
			s = s.Substring(0,s.Length-4);
			return s.ToUpper();
		}
	public string GenPrimaryKeySentence(TableSchema table)
		{
			if (table.PrimaryKey != null)
			{
				if (table.PrimaryKey.MemberColumns.Count == 1)
				{
					return GetCSType(table.PrimaryKey.MemberColumns[0]) + " " + GetCamelCaseName(GetSafeName(table.PrimaryKey.MemberColumns[0]));
				}
				else
				{
					throw new ApplicationException("This template will not work on primary keys with more than one member column.");
				}
			}
			else
			{
				throw new ApplicationException("This template will only work on tables with a primary key.");
			}
		}
		
		public string GenPrimaryKeyParam(TableSchema table)
		{
			string s = "";
			if (table.PrimaryKey != null)
			{
				for(int i = 0; i < table.PrimaryKey.MemberColumns.Count; i++)
				{
					s = s + GetCSType(table.PrimaryKey.MemberColumns[i]) + " " + GetCamelCaseName(GetSafeName(table.PrimaryKey.MemberColumns[i])) + ", ";
				}
			}
			else
			{
				throw new ApplicationException("This template will only work on tables with a primary key.");
			}
			s = s.Remove(s.Length - 2, 2);
			return s;
		}
		public string GenPrimaryKeyParamValue(TableSchema table)
		{
			string s = "";
			if (table.PrimaryKey != null)
			{
				for(int i = 0; i < table.PrimaryKey.MemberColumns.Count; i++)
				{
					s = s + GetMemberVariableName(table.PrimaryKey.MemberColumns[i]) + " = " + GetCamelCaseName(GetSafeName(table.PrimaryKey.MemberColumns[i])) + ";\n\t\t\t";
				}
			}
			else
			{
				throw new ApplicationException("This template will only work on tables with a primary key.");
			}
			s = s.Remove(s.Length - 2, 2);
			return s;
		}
		public string GenPrimaryKeyParamValue1(TableSchema table)
		{
			string s = "";
			if (table.PrimaryKey != null)
			{
				for(int i = 0; i < table.PrimaryKey.MemberColumns.Count; i++)
				{
					s = s + GetCamelCaseName(GetSafeName(table.PrimaryKey.MemberColumns[i])) + " = " +":"+GetCamelCaseName(GetSafeName(table.PrimaryKey.MemberColumns[i]))+" AND ";
				}
			}
			else
			{
				throw new ApplicationException("This template will only work on tables with a primary key.");
			}
			//s = s.Remove(s.Length - 1, 1);
			s = s.Substring(0,s.Length-4);
			return s.ToUpper();
		}
		public string GetPrimaryKeySentences(TableSchema table)
		{
			string s = "";
			if (table.PrimaryKey != null)
			{
				for(int i = 0; i < table.PrimaryKey.MemberColumns.Count; i++)
				{
					s = s + "private " + GetCSType(table.PrimaryKey.MemberColumns[i]) + " " + GetMemberVariableName(table.PrimaryKey.MemberColumns[i]) + ";" + Environment.NewLine + "\t\t";
				}
			}
			else
			{
				throw new ApplicationException("This template will only work on tables with a primary key.");
			}
			return s;
		}
		
		public string GetPrimaryKey(TableSchema table)
		{
			string s="";
			if(table.PrimaryKey !=null)
			{
				for(int i=0;i<table.PrimaryKey .MemberColumns .Count ;i++)
				{
					s=s+GetMemberVariableName(table.PrimaryKey.MemberColumns[i])+";" + Environment.NewLine + "\t\t";
				}
			}
			else
			{
				throw new ApplicationException("This template will only work on tables with a primary key.");
			}		
			s=s.Substring (1,s.LastIndexOf(";")-1);
			return s;
		}
		
		public string GetMemberVariableDeclarationStatement(ColumnSchema column)
		{
			return GetMemberVariableDeclarationStatement("protected", column);
		}

		public string GetMemberVariableDeclarationStatement(string protectionLevel, ColumnSchema column)
		{
			string statement = protectionLevel + " ";
			statement += GetCSType(column) + " " + GetMemberVariableName(column);
	
			
			statement += ";";
	
			return statement;
		}
		
public string GetConstructorParameters( TableSchema table )
{
	string ret = "";
	foreach(ColumnSchema column in table.Columns)
	{
		ret += GetCSType(column) + " " + GetCamelCaseName(GetPropertyName(column)) + ",\n\t\t\t";
	}
	return ret.Substring(0, ret.Length - 5);
}

public string GetAssignValue( TableSchema table )
{
	string ret = "";
	foreach(ColumnSchema column in table.Columns)
	{
		ret += GetMemberVariableName(column) + (new String(' ', GetPropertyNameMaxLength(table) - GetPropertyNameLength(column))) + " = " + GetCamelCaseName(GetPropertyName(column)) + ";\n\t\t\t";
	}
	return ret;
}
public int GetPropertyNameLength(ColumnSchema column)
{
	return (GetPropertyName(column)).Length;
}
public int GetPropertyNameMaxLength(TableSchema table)
{
	int ret = 0;
	foreach(ColumnSchema column in table.Columns)
	{
		ret = ret < GetPropertyNameLength(column)?GetPropertyNameLength(column):ret;
	}
	return ret;
}

	public string GetSqlDataType(DbType dataType)
		{
			switch (dataType)
			{
				case DbType.AnsiString: return "SqlDbType.VarChar";
				//case DbType.AnsiStringFixedLength: return SqlDbType.;
				case DbType.Binary: return "SqlDbType.Binary";
				case DbType.Boolean: return "SqlDbType.Bit";
				case DbType.Byte: return "SqlDbType.Binary";
				//case DbType.Currency: return "NullableDecimal";
				case DbType.Date: return "SqlDbType.Date";
				case DbType.DateTime: return "SqlDbType.DateTime";
				case DbType.Decimal: return "SqlDbType.Decimal";
				case DbType.Double: return "SqlDbType.Float";
				case DbType.Guid: return "SqlDbType.UniqueIdentifier";
				case DbType.Int16: return "SqlDbType.SmallInt";
				case DbType.Int32: return "SqlDbType.Int";
				case DbType.Int64: return "SqlDbType.BigInt";
				//case DbType.Object: return SqlDbType.;
				case DbType.Single: return "SqlDbType.Real";
				case DbType.String: return "SqlDbType.NText";
				case DbType.StringFixedLength: return "SqlDbType.NChar";
				case DbType.Time: return "SqlDbType.Time";
				//case DbType.VarNumeric: return SqlDbType.v;
					//the following won't be used
					//		case DbType.SByte: return "NullableSByte";
					//		case DbType.UInt16: return "NullableUShort";
					//		case DbType.UInt32: return "NullableUInt";
					//		case DbType.UInt64: return "NullableULong";
				default: return "SqlDbType.VarChar";
			}
		}
        
        public string GetOracleDataType(string nativeType)
		{
			switch (nativeType.ToUpper())
			{
				case "VARCHAR2": return "OracleType.VarChar";
				case "NUMBER": return "OracleType.Number";
				case "DATE": return "OracleType.DateTime";
				case "FLOAT": return "OracleType.Float";
                case "TIMESTAMP(6)": return "OracleType.Timestamp";
				
				default: return "OracleType.VarChar";
			}
		}
        
        public string GetOracleDataType2(DbType dataType)
		{
			switch (dataType)
			{
				case DbType.AnsiString: return "OracleType.VarChar";
				case DbType.Binary: return "OracleType.Blob";
				case DbType.Boolean: return "OracleType.Char";
				case DbType.Byte: return "OracleType.Byte";
				case DbType.Date: return "OracleType.DateTime";
				case DbType.DateTime: return "OracleType.DateTime";
				case DbType.Decimal: return "OracleType.Number";
				case DbType.Double: return "OracleType.Double";                
				//case DbType.Guid: return "OracleType.UniqueIdentifier";
				case DbType.Int16: return "OracleType.Int16";
				case DbType.Int32: return "OracleType.Int32";
				//case DbType.Int64: return "OracleType.BigInt";
				case DbType.Single: return "OracleType.Float";
				case DbType.String: return "OracleType.NVarChar";
				case DbType.StringFixedLength: return "OracleType.NChar";
				case DbType.Time: return "OracleType.Time";
				//case DbType.VarNumeric: return SqlDbType.v;
					//the following won't be used
					//		case DbType.SByte: return "NullableSByte";
					//		case DbType.UInt16: return "NullableUShort";
					//		case DbType.UInt32: return "NullableUInt";
					//		case DbType.UInt64: return "NullableULong";
				default: return "SqlDbType.VarChar";
			}
		}
		
	public string SetSqlparam(TableSchema table)
		{
		   string s = "";
		   for (int i = 0; i < table.Columns.Count; i++)
			{
				if (table.Columns[i].Name.ToUpper() == "TS")//TS过滤
				{
					continue;
				}
				if (table.Columns[i].Name.ToUpper() == "ROWID")//ROWID过滤
				{
					continue;
				}
				if (table.Columns[i].Name.ToUpper() == "CREATED_DATE")//CREATED_DATE
				{
					continue;
				}
				if (table.Columns[i].Name.ToUpper() == "UPDATED_DATE")//UPDATED_DATE过滤
				{
					continue;
				}
				if(table.Columns[i].IsPrimaryKeyMember == true)
                {
                    continue;
                }
                
                if(i == 0)
                {
                    s = s + "new OracleParameter(this."+GetPropertyName(SourceTable.Columns[i])+ ","
                    +GetOracleDataType(SourceTable.Columns[i].NativeType)+","+SourceTable.Columns[i].Size.ToString()+")"+",\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t";
                }
                else
                {
				    s = s + "  new OracleParameter(this."+GetPropertyName(SourceTable.Columns[i])+ ","
                    +GetOracleDataType(SourceTable.Columns[i].NativeType)+","+SourceTable.Columns[i].Size.ToString()+")"+",\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t";
			    }
            }
            
            if(table.PrimaryKey != null)
            {
                for(int i=0;i<table.PrimaryKey.MemberColumns.Count ;i++)
                {
                    string k = GetMemberVariableName(table.PrimaryKey.MemberColumns[i]).ToString().ToUpper();
                    s = s + "  new OracleParameter(this."+GetPropertyName(k.Substring(1,k.Length-1))
                    + ","+GetOracleDataType(table.PrimaryKey.MemberColumns[i].NativeType)+","+table.PrimaryKey.MemberColumns[i].Size.ToString()+")"+",\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t";
                }
            }
            else
            {
                throw new ApplicationException("This template will only work on tables with a primary key.");
            }
            
			s = s.Remove(s.Length - 2, 2);
			s = s.Substring(0,s.LastIndexOf(","));
			return s;
		}
		
	public string SetSqlparamArray(TableSchema table)
    {
    	string s = "";
		int iParamSeq = -1;
		for(int i = 0;i<table.Columns.Count;i++)
		{			
			if (table.Columns[i].Name.ToUpper() == "TS")//TS过滤
			{
				continue;
			}
			if (table.Columns[i].Name.ToUpper() == "ROWID")//ROWID过滤
			{
				continue;
			}
            if(table.Columns[i].IsPrimaryKeyMember == true)
            {
                continue;
            }
			if (table.Columns[i].Name.ToUpper() == "CREATED_DATE")//CREATED_DATE
			{
				continue;
			}
			if (table.Columns[i].Name.ToUpper() == "UPDATED_DATE")//UPDATED_DATE过滤
			{
				continue;
			}
			iParamSeq++; 
            if(table.Columns[i].Name.ToUpper()  == "EDI_SYNC_FLG")
            {
                s = s +"\n\t\t\t\t"+"if(!string.IsNullOrEmpty("+FormatParamClassName(SourceTable)+"Info."+GetFormatPropertyName(SourceTable.Columns[i])+"))"+"\n\t\t\t\t";
					s = s+"  paramArray["+iParamSeq+"].Value = "+ FormatParamClassName(SourceTable)+"Info."+GetFormatPropertyName(SourceTable.Columns[i])+";"+"\n\t\t\t\t";
					s=s+"else"+"\n\t\t\t\t";
					s=s+"  paramArray["+iParamSeq+"].Value = "+"\"N\""+";"+"\n\t\t\t\t";
            }
			else if(table.Columns[i].AllowDBNull)
			{
				if(table.Columns[i].DataType == System.Data.DbType.AnsiString)
				{
					s = s +"\n\t\t\t\t"+"if(!string.IsNullOrEmpty("+FormatParamClassName(SourceTable)+"Info."+GetFormatPropertyName(SourceTable.Columns[i])+"))"+"\n\t\t\t\t";
					s = s+"  paramArray["+iParamSeq+"].Value = "+ FormatParamClassName(SourceTable)+"Info."+GetFormatPropertyName(SourceTable.Columns[i])+";"+"\n\t\t\t\t";
					s=s+"else"+"\n\t\t\t\t";
					s=s+"  paramArray["+iParamSeq+"].Value = "+"DBNull.Value"+";"+"\n\t\t\t\t";
				}
				else if(table.Columns[i].DataType == System.Data.DbType.DateTime || table.Columns[i].DataType == System.Data.DbType.Date)
				{
					if(GetPropertyName(table.Columns[i]) == "UPDATED_DATE")
					{
						s = s + "\n\t\t\t\t";
						s = s +"  paramArray["+iParamSeq+"].Value = DateTime.Now;"+"\n\t\t\t\t";
					}
					else
					{					
						s = s +"\n\t\t\t\t"+"if("+FormatParamClassName(SourceTable)+"Info."+GetFormatPropertyName(SourceTable.Columns[i])+" != new DateTime()"+")"+"\n\t\t\t\t";
						s = s+"  paramArray["+iParamSeq+"].Value = "+ FormatParamClassName(SourceTable)+"Info."+GetFormatPropertyName(SourceTable.Columns[i])+";"+"\n\t\t\t\t";
						s=s+"else"+"\n\t\t\t\t";
						s=s+"  paramArray["+iParamSeq+"].Value = "+"DBNull.Value"+";"+"\n\t\t\t\t";
					}
					
				}
				//begin  给UpdatedDate赋服务器时间
				//else if(GetPropertyName(table.Columns[i]) == "UPDATED_DATE")
				//{
				//	s = s + "\n\t\t\t\t";
				//	s = s +"  paramArray["+iParamSeq+"].Value = DateTime.Now;"+"\n\t\t\t\t";
				//}
				//end				
				else if(table.Columns[i].DataType == System.Data.DbType.Single)
				{
					s = s + "\n\t\t\t\t";
					s = s+"  paramArray["+iParamSeq+"].Value = "+ FormatParamClassName(SourceTable)+"Info."+GetFormatPropertyName(SourceTable.Columns[i])+";"+"\n\t\t\t\t";
				
                }
				else if(table.Columns[i].DataType == System.Data.DbType.Currency
                || table.Columns[i].DataType == System.Data.DbType.Decimal
                || table.Columns[i].DataType == System.Data.DbType.Double
                || table.Columns[i].DataType == System.Data.DbType.Int16
                || table.Columns[i].DataType == System.Data.DbType.Int32
                || table.Columns[i].DataType == System.Data.DbType.Int64
                || table.Columns[i].DataType == System.Data.DbType.VarNumeric
                || table.Columns[i].NativeType.ToString() == "NUMBER"
                || table.Columns[i].NativeType.ToString() == "FLOAT"
                || table.Columns[i].NativeType.ToString() == "INTEGER")
				{	
				    s = s + "\n\t\t\t\t";
					s = s+"  paramArray["+iParamSeq+"].Value = "+ FormatParamClassName(SourceTable)+"Info."+GetFormatPropertyName(SourceTable.Columns[i])+";"+"\n\t\t\t\t";					
				
                }
				else if(table.Columns[i].DataType == System.Data.DbType.AnsiString)
				{	
					s = s + "\n\t\t\t\t";
					s = s+"  paramArray["+iParamSeq+"].Value = "+ FormatParamClassName(SourceTable)+"Info."+GetFormatPropertyName(SourceTable.Columns[i])+";"+"\n\t\t\t\t";					
				}
				else if(table.Columns[i].DataType == System.Data.DbType.AnsiStringFixedLength)//Char类型
				{	
					s = s +"\n\t\t\t\t"+"if(!string.IsNullOrEmpty("+FormatParamClassName(SourceTable)+"Info."+GetFormatPropertyName(SourceTable.Columns[i])+"))"+"\n\t\t\t\t";
					s = s+"  paramArray["+iParamSeq+"].Value = "+ FormatParamClassName(SourceTable)+"Info."+GetFormatPropertyName(SourceTable.Columns[i])+";"+"\n\t\t\t\t";
					s=s+"else"+"\n\t\t\t\t";
					s=s+"  paramArray["+iParamSeq+"].Value = "+"DBNull.Value"+";"+"\n\t\t\t\t";					
				}				
			}
			else
			{
				if(table.Columns[i].DataType == System.Data.DbType.Date || table.Columns[i].DataType == System.Data.DbType.DateTime)
				{					
				    s = s + "\n\t\t\t\t";
					s = s +"  paramArray["+iParamSeq+"].Value = DateTime.Now;"+"\n\t\t\t\t";  
                }
				else if(table.Columns[i].DataType == System.Data.DbType.AnsiString)
				{
				    s = s +"\n\t\t\t\t"+"if(!string.IsNullOrEmpty("+FormatParamClassName(SourceTable)+"Info."+GetFormatPropertyName(SourceTable.Columns[i])+"))"+"\n\t\t\t\t";
					s = s+"  paramArray["+iParamSeq+"].Value = "+ FormatParamClassName(SourceTable)+"Info."+GetFormatPropertyName(SourceTable.Columns[i])+";"+"\n\t\t\t\t";
					s=s+"else"+"\n\t\t\t\t";
					s=s+"  paramArray["+iParamSeq+"].Value = "+"ConstUtils.CONST_SPACE"+";"+"\n\t\t\t\t";
				}
                else if(table.Columns[i].NativeType.ToUpper() == "NUMBER"
                        || table.Columns[i].NativeType.ToString() == "FLOAT"
                        || table.Columns[i].NativeType.ToString() == "INTEGER")
				{
				    s = s + "\n\t\t\t\t";
					s = s+"  paramArray["+iParamSeq+"].Value = "+ FormatParamClassName(SourceTable)+"Info."+GetFormatPropertyName(SourceTable.Columns[i])+";"+"\n\t\t\t\t";					
				}
			}            
		}
        
        if(table.PrimaryKey != null)
        {
            for(int j=0;j<table.PrimaryKey.MemberColumns.Count ;j++)
            {                        
                s = s + "\n\t\t\t\t";
			    s = s +"  paramArray["+(iParamSeq+j+1)+"].Value = "+ FormatParamClassName(SourceTable)+"Info."+GetFormatPropertyName(table.PrimaryKey.MemberColumns[j])+";"+"\n\t\t\t\t";
            }
        }

		//string a = Convert.ToString(table.Columns[5].DataType);
		return s;	
	}
	
	public string GetFormatPropertyName(SchemaObjectBase schemaObject)
	{
		bool isHasChar = false;
        string temp = "";
		string str = GetPropertyName(schemaObject.Name);
		
        if (str.Contains("_"))
        {

            string s1 = str.Substring(0, str.LastIndexOf("_"));
            string s2 = str.Substring(str.LastIndexOf("_"), str.Length - str.LastIndexOf("_"));

            if (s2 == "_ID" || s2 == "_GID")
            {
                str = s1;
                isHasChar = true;
            }

            str = str.ToLower();

            char[] array = str.ToCharArray();

            for (int i = 0; i < array.Length; i++)
            {
                if (i == 0)
                {
                    array[0] = Convert.ToChar(array[0].ToString().ToUpper());
                }

                if (array[i].ToString() == "_")
                {
                    array[i + 1] = Convert.ToChar(array[i + 1].ToString().ToUpper());
                }
                temp += array[i].ToString();
            }

            if (s2 != "" && isHasChar == true)
                temp += s2;
            
            temp = temp.Replace("_", "");
        }
        else
		{         
			//temp = str;
			char[] tempArray = str.ToLower().ToCharArray();
                for (int n = 0; n < tempArray.Length; n++)
                {
                    if (n == 0)
                    {
                        tempArray[n] = Convert.ToChar(tempArray[n].ToString().ToUpper());                        
                    }
                    temp += tempArray[n].ToString();
                }
		}
		return temp;
	}
	
</script>